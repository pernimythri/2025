import java.util.*;

public class Main {
    
    List<Integer> LeftMost_RightMost_Index(int[] arr, int n, int x) {
        List<Integer> list = new ArrayList<>();
        int first = -1, last = -1;
        for (int i = 0; i < n; i++) {
            if (arr[i] == x) {
                first = i;
                break;
            }
        }
        for (int j = n - 1; j >= 0; j--) {
            if (arr[j] == x) {
                last = j;
                break;
            }
        }
        if (first != -1 && last != -1) {
            list.add(first);
            list.add(last);
        } else {
            list.add(-1);
            list.add(-1);
        }
        return list;
    }
    
    public static void main(String[] args) {
        Main obj = new Main();
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] arr = new int[n];
        
        for (int i = 0; i < n; i++) {
            arr[i] = sc.nextInt();
        }

        int x = sc.nextInt();
        List<Integer> result = obj.LeftMost_RightMost_Index(arr, n, x);
        System.out.println(result);
    }
}
------------------------------------------------------------------------------------------
***** If return type is pair without having list then return as => return new pair(first,last);
import java.util.*;

public class Main {
    
    List<Integer> LeftMost_RightMost_Index(int[] arr, int n, int x) {
        List<Integer> list = new ArrayList<>();
        int first = -1, last = -1;
        int  low=0,high=n-1;
        
        while(low<=high)
        {
            int mid=(low+high)/2;
            if(arr[mid]==x)
            {
                first=mid;
                high=mid-1;
            }
            else if(arr[mid]<x)
            {
                low=mid+1;
            }
            else
            high=mid-1;
        }
        list.add(first);
        
      low=0;
      high=n-1;
         while(low<=high)
        
        {
            int mid=(low+high)/2;
            if(arr[mid]==x)
            {
                last=mid;
                low=mid+1;
            }
            else if(arr[mid]<x)
            {
                low=mid+1;
            }
            else
            high=mid-1;
        }
        list.add(last);
    
        return list;  
        
    }
    public static void main(String[] args) {
        Main obj = new Main();
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] arr = new int[n];
        
        for (int i = 0; i < n; i++) {
            arr[i] = sc.nextInt();
        }

        int x = sc.nextInt();
        List<Integer> result = obj.LeftMost_RightMost_Index(arr, n, x);
        System.out.println(result);
    }
}
---------------------------------------------------------------------------------------------
